import {
    PRODUCT_LIST_REQUEST,
    PRODUCT_LIST_SUCCESS,
    PRODUCT_LIST_FAIL,
    PRODUCT_DETAILS_REQUEST,
    PRODUCT_DETAILS_SUCCESS,
    PRODUCT_DETAILS_FAIL,
    PRODUCT_DELETE_REQUEST,
    PRODUCT_DELETE_SUCCESS,
    PRODUCT_DELETE_FAIL,
    PRODUCT_CREATE_RESET,
    PRODUCT_CREATE_FAIL,
    PRODUCT_CREATE_SUCCESS,
    PRODUCT_CREATE_REQUEST,
    PRODUCT_UPDATE_REQUEST,
    PRODUCT_UPDATE_SUCCESS,
    PRODUCT_UPDATE_FAIL,
    PRODUCT_UPDATE_RESET,
    PRODUCT_CREATE_REVIEW_REQUEST,
    PRODUCT_CREATE_REVIEW_SUCCESS,
    PRODUCT_CREATE_REVIEW_FAIL,
    PRODUCT_CREATE_REVIEW_RESET,
    PRODUCT_TOP_REQUEST,
    PRODUCT_TOP_SUCCESS,
    PRODUCT_TOP_FAIL,
} from "../constants/productConstants";
import axios from "axios";
import { createSlice } from "@reduxjs/toolkit";
import { logout } from "../actions/userActions";

const initialState = {};

export const productSlice = createSlice({
    name: "product",
    initialState,
    reducers: {
        productListReducer: (state = { products: [] }, action: any) => {
            switch (action.type) {
                case PRODUCT_LIST_REQUEST:
                    return { loading: true, products: [] };
                case PRODUCT_LIST_SUCCESS:
                    return {
                        loading: false,
                        products: action.payload.products,
                        pages: action.payload.pages,
                        page: action.payload.page,
                    };
                case PRODUCT_LIST_FAIL:
                    return { loading: false, error: action.payload };
                default:
                    return state;
            }
        },
        productDetailsReducer: (
            state = { product: { reviews: [] } },
            action: any
        ) => {
            switch (action.type) {
                case PRODUCT_DETAILS_REQUEST:
                    return { ...state, loading: true };
                case PRODUCT_DETAILS_SUCCESS:
                    return { loading: false, product: action.payload };
                case PRODUCT_DETAILS_FAIL:
                    return { loading: false, error: action.payload };
                default:
                    return state;
            }
        },
        productDeleteReducer: (state = {}, action: any) => {
            switch (action.type) {
                case PRODUCT_DELETE_REQUEST:
                    return { loading: true };
                case PRODUCT_DELETE_SUCCESS:
                    return { loading: false, success: true };
                case PRODUCT_DELETE_FAIL:
                    return { loading: false, error: action.payload };
                default:
                    return state;
            }
        },
        productCreateReducer: (state = {}, action: any) => {
            switch (action.type) {
                case PRODUCT_CREATE_REQUEST:
                    return { loading: true };
                case PRODUCT_CREATE_SUCCESS:
                    return {
                        loading: false,
                        success: true,
                        product: action.payload,
                    };
                case PRODUCT_CREATE_FAIL:
                    return { loading: false, error: action.payload };
                case PRODUCT_CREATE_RESET:
                    return {};
                default:
                    return state;
            }
        },
        productUpdateReducer: (state = { product: {} }, action: any) => {
            switch (action.type) {
                case PRODUCT_UPDATE_REQUEST:
                    return { loading: true };
                case PRODUCT_UPDATE_SUCCESS:
                    return {
                        loading: false,
                        success: true,
                        product: action.payload,
                    };
                case PRODUCT_UPDATE_FAIL:
                    return { loading: false, error: action.payload };
                case PRODUCT_UPDATE_RESET:
                    return { product: {} };
                default:
                    return state;
            }
        },
        productReviewCreateReducer: (state = {}, action: any) => {
            switch (action.type) {
                case PRODUCT_CREATE_REVIEW_REQUEST:
                    return { loading: true };
                case PRODUCT_CREATE_REVIEW_SUCCESS:
                    return { loading: false, success: true };
                case PRODUCT_CREATE_REVIEW_FAIL:
                    return { loading: false, error: action.payload };
                case PRODUCT_CREATE_REVIEW_RESET:
                    return {};
                default:
                    return state;
            }
        },
        productTopRatedReducer: (state = { products: [] }, action: any) => {
            switch (action.type) {
                case PRODUCT_TOP_REQUEST:
                    return { loading: true, products: [] };
                case PRODUCT_TOP_SUCCESS:
                    return { loading: false, products: action.payload };
                case PRODUCT_TOP_FAIL:
                    return { loading: false, error: action.payload };
                default:
                    return state;
            }
        },
    },
});

export const listProducts =
    (keyword = "", pageNumber = "") =>
    async (dispatch: any) => {
        try {
            dispatch({ type: PRODUCT_LIST_REQUEST });

            const { data } = await axios.get(
                `/api/products?keyword=${keyword}&pageNumber=${pageNumber}`
            );

            dispatch({
                type: PRODUCT_LIST_SUCCESS,
                payload: data,
            });
        } catch (error: any) {
            dispatch({
                type: PRODUCT_LIST_FAIL,
                payload:
                    error.response && error.response.data.message
                        ? error.response.data.message
                        : error.message,
            });
        }
    };

export const listProductDetails = (id: any) => async (dispatch: any) => {
    try {
        dispatch({ type: PRODUCT_DETAILS_REQUEST });

        const { data } = await axios.get(`/api/products/${id}`);

        dispatch({
            type: PRODUCT_DETAILS_SUCCESS,
            payload: data,
        });
    } catch (error: any) {
        dispatch({
            type: PRODUCT_DETAILS_FAIL,
            payload:
                error.response && error.response.data.message
                    ? error.response.data.message
                    : error.message,
        });
    }
};

export const deleteProduct =
    (id: any) => async (dispatch: any, getState: any) => {
        try {
            dispatch({
                type: PRODUCT_DELETE_REQUEST,
            });

            const {
                userLogin: { userInfo },
            } = getState();

            const config = {
                headers: {
                    Authorization: `Bearer ${userInfo.token}`,
                },
            };

            await axios.delete(`/api/products/${id}`, config);

            dispatch({
                type: PRODUCT_DELETE_SUCCESS,
            });
        } catch (error: any) {
            const message =
                error.response && error.response.data.message
                    ? error.response.data.message
                    : error.message;
            if (message === "Not authorized, token failed") {
                dispatch(logout());
            }
            dispatch({
                type: PRODUCT_DELETE_FAIL,
                payload: message,
            });
        }
    };

export const createProduct = () => async (dispatch: any, getState: any) => {
    try {
        dispatch({
            type: PRODUCT_CREATE_REQUEST,
        });

        const {
            userLogin: { userInfo },
        } = getState();

        const config = {
            headers: {
                Authorization: `Bearer ${userInfo.token}`,
            },
        };

        const { data } = await axios.post(`/api/products`, {}, config);

        dispatch({
            type: PRODUCT_CREATE_SUCCESS,
            payload: data,
        });
    } catch (error: any) {
        const message =
            error.response && error.response.data.message
                ? error.response.data.message
                : error.message;
        if (message === "Not authorized, token failed") {
            dispatch(logout());
        }
        dispatch({
            type: PRODUCT_CREATE_FAIL,
            payload: message,
        });
    }
};

export const updateProduct =
    (product: any) => async (dispatch: any, getState: any) => {
        try {
            dispatch({
                type: PRODUCT_UPDATE_REQUEST,
            });

            const {
                userLogin: { userInfo },
            } = getState();

            const config = {
                headers: {
                    "Content-Type": "application/json; charset=UTF-8",
                    Authorization: `Bearer ${userInfo.token}`,
                },
            };

            const { data } = await axios.put(
                `/api/products/${product._id}`,
                product,
                config
            );

            dispatch({
                type: PRODUCT_UPDATE_SUCCESS,
                payload: data,
            });
            dispatch({ type: PRODUCT_DETAILS_SUCCESS, payload: data });
        } catch (error: any) {
            const message =
                error.response && error.response.data.message
                    ? error.response.data.message
                    : error.message;
            if (message === "Not authorized, token failed") {
                dispatch(logout());
            }
            dispatch({
                type: PRODUCT_UPDATE_FAIL,
                payload: message,
            });
        }
    };

export const createProductReview =
    (productId: any, review: any) => async (dispatch: any, getState: any) => {
        try {
            dispatch({
                type: PRODUCT_CREATE_REVIEW_REQUEST,
            });

            const {
                userLogin: { userInfo },
            } = getState();

            const config = {
                headers: {
                    "Content-Type": "application/json; charset=UTF-8",
                    Authorization: `Bearer ${userInfo.token}`,
                },
            };

            await axios.post(
                `/api/products/${productId}/reviews`,
                review,
                config
            );

            dispatch({
                type: PRODUCT_CREATE_REVIEW_SUCCESS,
            });
        } catch (error: any) {
            const message =
                error.response && error.response.data.message
                    ? error.response.data.message
                    : error.message;
            if (message === "Not authorized, token failed") {
                dispatch(logout());
            }
            dispatch({
                type: PRODUCT_CREATE_REVIEW_FAIL,
                payload: message,
            });
        }
    };

export const listTopProducts = () => async (dispatch: any) => {
    try {
        dispatch({ type: PRODUCT_TOP_REQUEST });

        const { data } = await axios.get(`/api/products/top`);

        dispatch({
            type: PRODUCT_TOP_SUCCESS,
            payload: data,
        });
    } catch (error: any) {
        dispatch({
            type: PRODUCT_TOP_FAIL,
            payload:
                error.response && error.response.data.message
                    ? error.response.data.message
                    : error.message,
        });
    }
};

import axios from "axios";
import {
    USER_DETAILS_FAIL,
    USER_DETAILS_REQUEST,
    USER_DETAILS_SUCCESS,
    USER_LOGIN_FAIL,
    USER_LOGIN_REQUEST,
    USER_LOGIN_SUCCESS,
    USER_LOGOUT,
    USER_REGISTER_FAIL,
    USER_REGISTER_REQUEST,
    USER_REGISTER_SUCCESS,
    USER_UPDATE_PROFILE_FAIL,
    USER_UPDATE_PROFILE_REQUEST,
    USER_UPDATE_PROFILE_SUCCESS,
    USER_DETAILS_RESET,
    USER_LIST_FAIL,
    USER_LIST_SUCCESS,
    USER_LIST_REQUEST,
    USER_LIST_RESET,
    USER_DELETE_REQUEST,
    USER_DELETE_SUCCESS,
    USER_DELETE_FAIL,
    USER_UPDATE_FAIL,
    USER_UPDATE_SUCCESS,
    USER_UPDATE_REQUEST,
    USER_UPDATE_PROFILE_RESET,
    USER_UPDATE_RESET,
} from "../constants/userConstants";
import { ORDER_LIST_MY_RESET } from "../constants/orderConstants";
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";

// Authenticate user (you can dispatch this async action from your component)
export const authUser = createAsyncThunk(
    "/login",
    async (authParams, thunkApi) => {
        const { rejectWithValue } = thunkApi;
        try {
            const response = await axios.get("/api/users/login", {
                authParams,
            });
            return response.data.user;
        } catch (error) {
            // Use `err.response.data` as `action.payload` for a `rejected` action, by explicitly returning it using the `rejectWithValue()` utility
            return rejectWithValue(error);
        }
    }
);

const initialState = {
    authenticated: false,
    info: null,
    isLoading: false,
    error: null,
};

const userAuthSlice = createSlice({
    name: "authUser",
    initialState,
    reducers: {
        userLoginReducer: (
            state = {
                authenticated: false,
                info: null,
                isLoading: false,
                error: null,
            },
            action: any
        ) => {
            switch (action.type) {
                case USER_LOGIN_REQUEST:
                    return { loading: true };
                case USER_LOGIN_SUCCESS:
                    return { loading: false, userInfo: action.payload };
                case USER_LOGIN_FAIL:
                    return { loading: false, error: action.payload };
                case USER_LOGOUT:
                    return {};
                default:
                    return state;
            }
        },
        userRegisterReducer: (
            state = {
                authenticated: false,
                info: null,
                isLoading: false,
                error: null,
            },
            action
        ) => {
            switch (action.type) {
                case USER_REGISTER_REQUEST:
                    return { loading: true };
                case USER_REGISTER_SUCCESS:
                    return { loading: false, userInfo: action.payload };
                case USER_REGISTER_FAIL:
                    return { loading: false, error: action.payload };
                case USER_LOGOUT:
                    return {};
                default:
                    return state;
            }
        },
        userDetailsReducer: (state = { user: {} }, action) => {
            switch (action.type) {
                case USER_DETAILS_REQUEST:
                    return { ...state, loading: true };
                case USER_DETAILS_SUCCESS:
                    return { loading: false, user: action.payload };
                case USER_DETAILS_FAIL:
                    return { loading: false, error: action.payload };
                case USER_DETAILS_RESET:
                    return { user: {} };
                default:
                    return state;
            }
        },
        userUpdateProfileReducer: (
            state = {
                authenticated: false,
                info: null,
                isLoading: false,
                error: null,
            },
            action
        ) => {
            switch (action.type) {
                case USER_UPDATE_PROFILE_REQUEST:
                    return { loading: true };
                case USER_UPDATE_PROFILE_SUCCESS:
                    return {
                        loading: false,
                        success: true,
                        userInfo: action.payload,
                    };
                case USER_UPDATE_PROFILE_FAIL:
                    return { loading: false, error: action.payload };
                case USER_UPDATE_PROFILE_RESET:
                    return {};
                default:
                    return state;
            }
        },
        userListReducer: (state = { users: [] }, action) => {
            switch (action.type) {
                case USER_LIST_REQUEST:
                    return { loading: true };
                case USER_LIST_SUCCESS:
                    return { loading: false, users: action.payload };
                case USER_LIST_FAIL:
                    return { loading: false, error: action.payload };
                case USER_LIST_RESET:
                    return { users: [] };
                default:
                    return state;
            }
        },
        userDeleteReducer: (state = {}, action) => {
            switch (action.type) {
                case USER_DELETE_REQUEST:
                    return { loading: true };
                case USER_DELETE_SUCCESS:
                    return { loading: false, success: true };
                case USER_DELETE_FAIL:
                    return { loading: false, error: action.payload };
                default:
                    return state;
            }
        },
        userUpdateReducer: (state = { user: {} }, action) => {
            switch (action.type) {
                case USER_UPDATE_REQUEST:
                    return { loading: true };
                case USER_UPDATE_SUCCESS:
                    return { loading: false, success: true };
                case USER_UPDATE_FAIL:
                    return { loading: false, error: action.payload };
                case USER_UPDATE_RESET:
                    return {
                        user: {},
                    };
                default:
                    return state;
            }
        },
    },
    extraReducers: {},
});

// Exporting data for selectors
export const isAuthenticated = (state: any) => {
    return state.currentUser.authenticated;
};

export default userAuthSlice.reducer;

export const login = (email: any, password: any) => async (dispatch: any) => {
    try {
        dispatch({
            type: USER_LOGIN_REQUEST,
        });

        const config = {
            headers: {
                "Content-Type": "application/json; charset=UTF-8",
            },
        };

        const { data } = await axios.post(
            "/api/users/login",
            { email, password },
            config
        );

        dispatch({
            type: USER_LOGIN_SUCCESS,
            payload: data,
        });

        localStorage.setItem("userInfo", JSON.stringify(data));
    } catch (error: any) {
        dispatch({
            type: USER_LOGIN_FAIL,
            payload:
                error.response && error.response.data.message
                    ? error.response.data.message
                    : error.message,
        });
    }
};

export const logout = () => (dispatch: any) => {
    localStorage.removeItem("userInfo");
    localStorage.removeItem("cartItems");
    localStorage.removeItem("shippingAddress");
    localStorage.removeItem("paymentMethod");
    dispatch({ type: USER_LOGOUT });
    dispatch({ type: USER_DETAILS_RESET });
    dispatch({ type: ORDER_LIST_MY_RESET });
    dispatch({ type: USER_LIST_RESET });
    document.location.href = "/login";
};

export const register =
    (name: any, email: any, password: any) => async (dispatch: any) => {
        try {
            dispatch({
                type: USER_REGISTER_REQUEST,
            });

            const config = {
                headers: {
                    "Content-Type": "application/json; charset=UTF-8",
                },
            };

            const { data } = await axios.post(
                "/api/users",
                { name, email, password },
                config
            );

            dispatch({
                type: USER_REGISTER_SUCCESS,
                payload: data,
            });

            dispatch({
                type: USER_LOGIN_SUCCESS,
                payload: data,
            });

            localStorage.setItem("userInfo", JSON.stringify(data));
        } catch (error: any) {
            dispatch({
                type: USER_REGISTER_FAIL,
                payload:
                    error.response && error.response.data.message
                        ? error.response.data.message
                        : error.message,
            });
        }
    };

export const getUserDetails =
    (id: any) => async (dispatch: any, getState: any) => {
        try {
            dispatch({
                type: USER_DETAILS_REQUEST,
            });

            const {
                userLogin: { userInfo },
            } = getState();

            const config = {
                headers: {
                    Authorization: `Bearer ${userInfo.token}`,
                },
            };

            const { data } = await axios.get(`/api/users/${id}`, config);

            dispatch({
                type: USER_DETAILS_SUCCESS,
                payload: data,
            });
        } catch (error: any) {
            const message =
                error.response && error.response.data.message
                    ? error.response.data.message
                    : error.message;
            if (message === "Not authorized, token failed") {
                dispatch(logout());
            }
            dispatch({
                type: USER_DETAILS_FAIL,
                payload: message,
            });
        }
    };

export const updateUserProfile =
    (user: any) => async (dispatch: any, getState: any) => {
        try {
            dispatch({
                type: USER_UPDATE_PROFILE_REQUEST,
            });

            const {
                userLogin: { userInfo },
            } = getState();

            const config = {
                headers: {
                    "Content-Type": "application/json; charset=UTF-8",
                    Authorization: `Bearer ${userInfo.token}`,
                },
            };

            const { data } = await axios.put(
                `/api/users/profile`,
                user,
                config
            );

            dispatch({
                type: USER_UPDATE_PROFILE_SUCCESS,
                payload: data,
            });
            dispatch({
                type: USER_LOGIN_SUCCESS,
                payload: data,
            });
            localStorage.setItem("userInfo", JSON.stringify(data));
        } catch (error: any) {
            const message =
                error.response && error.response.data.message
                    ? error.response.data.message
                    : error.message;
            if (message === "Not authorized, token failed") {
                dispatch(logout());
            }
            dispatch({
                type: USER_UPDATE_PROFILE_FAIL,
                payload: message,
            });
        }
    };

export const listUsers = () => async (dispatch: any, getState: any) => {
    try {
        dispatch({
            type: USER_LIST_REQUEST,
        });

        const {
            userLogin: { userInfo },
        } = getState();

        const config = {
            headers: {
                Authorization: `Bearer ${userInfo.token}`,
            },
        };

        const { data } = await axios.get(`/api/users`, config);

        dispatch({
            type: USER_LIST_SUCCESS,
            payload: data,
        });
    } catch (error: any) {
        const message =
            error.response && error.response.data.message
                ? error.response.data.message
                : error.message;
        if (message === "Not authorized, token failed") {
            dispatch(logout());
        }
        dispatch({
            type: USER_LIST_FAIL,
            payload: message,
        });
    }
};

export const deleteUser = (id: any) => async (dispatch: any, getState: any) => {
    try {
        dispatch({
            type: USER_DELETE_REQUEST,
        });

        const {
            userLogin: { userInfo },
        } = getState();

        const config = {
            headers: {
                Authorization: `Bearer ${userInfo.token}`,
            },
        };

        await axios.delete(`/api/users/${id}`, config);

        dispatch({ type: USER_DELETE_SUCCESS });
    } catch (error: any) {
        const message =
            error.response && error.response.data.message
                ? error.response.data.message
                : error.message;
        if (message === "Not authorized, token failed") {
            dispatch(logout());
        }
        dispatch({
            type: USER_DELETE_FAIL,
            payload: message,
        });
    }
};

export const updateUser =
    (user: any) => async (dispatch: any, getState: any) => {
        try {
            dispatch({
                type: USER_UPDATE_REQUEST,
            });

            const {
                userLogin: { userInfo },
            } = getState();

            const config = {
                headers: {
                    "Content-Type": "application/json; charset=UTF-8",
                    Authorization: `Bearer ${userInfo.token}`,
                },
            };

            const { data } = await axios.put(
                `/api/users/${user._id}`,
                user,
                config
            );

            dispatch({ type: USER_UPDATE_SUCCESS });

            dispatch({ type: USER_DETAILS_SUCCESS, payload: data });

            dispatch({ type: USER_DETAILS_RESET });
        } catch (error: any) {
            const message =
                error.response && error.response.data.message
                    ? error.response.data.message
                    : error.message;
            if (message === "Not authorized, token failed") {
                dispatch(logout());
            }
            dispatch({
                type: USER_UPDATE_FAIL,
                payload: message,
            });
        }
    };
